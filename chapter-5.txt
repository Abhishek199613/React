1.  What is a Microservice?
    A microservice is an architectural approach to software development where an application is composed of small, independently deployable services that work together to provide the application's functionality. Each service is designed to perform a specific function, such as user authentication, data storage, or processing of orders. These services communicate with each other typically through well-defined APIs (Application Programming Interfaces), often using lightweight protocols such as HTTP or messaging queues.
    Key characteristics of microservices include:
    Independence: Each microservice is developed, deployed, and scaled independently of other services, allowing teams to work on different parts of the application simultaneously.
    Scalability: Since services are independent, they can be scaled individually based on demand, allowing for more efficient resource utilization.
    Resilience: Failure in one service does not necessarily affect the entire application, as other services can continue to function independently.
    Technology Diversity: Different services can be implemented using different technologies, allowing teams to choose the best tools for the job.
    Flexibility: Microservices enable easier updates and changes to specific parts of the application without affecting the entire system, promoting agility and rapid iteration.
    Overall, microservices promote modular, decentralized development and are often used in large, complex applications where scalability, flexibility, and resilience are critical.

2.  What is Monolith architecture?
    A monolithic architecture is an approach to software development where the entire application is built as a single, tightly-coupled unit. In a monolithic architecture, all components of the application, including the user interface, business logic, and data access layer, are developed and deployed together as a single codebase and runtime.
    Key characteristics of monolithic architectures include:
    Single Codebase: All the code for the application resides in a single codebase or repository.
    Tight Coupling: Components within the application are tightly integrated and dependent on each other, making it difficult to modify or replace individual components without affecting others.
    Scalability Challenges: Scaling a monolithic application can be challenging, as the entire application must be replicated to handle increased load, which can lead to inefficiencies and resource wastage.
    Limited Technology Diversity: Since the entire application is built using the same technology stack, there is limited flexibility to use different technologies for different components.
    Deployment Complexity: Deploying updates or changes to a monolithic application often requires deploying the entire application, which can increase deployment complexity and downtime.
    Monolithic architectures are often used in smaller or less complex applications where simplicity and ease of development are prioritized over scalability and flexibility. However, as applications grow in size and complexity, monolithic architectures can become difficult to maintain and evolve, leading many organizations to adopt more modular approaches such as microservices.

3.  What is the difference between Monolith and Microservice?
    Monolithic architecture and microservices are two different architectural approaches to building software applications. Here are the key differences between them:
    Architecture:
    Monolithic: In a monolithic architecture, the entire application is developed and deployed as a single, tightly integrated unit. All components, including the user interface, business logic, and data access layer, are part of the same codebase and runtime.
    Microservices: In a microservices architecture, the application is composed of small, independently deployable services that work together to provide the application's functionality. Each service is developed and deployed separately and communicates with other services through well-defined APIs.
    Coupling:
    Monolithic: Components in a monolithic architecture are tightly coupled, meaning they are highly dependent on each other. Changes to one component can affect other components, making it challenging to modify or replace individual parts without impacting the entire application.
    Microservices: Microservices promote loose coupling, where each service is independent of others. Services communicate through APIs, allowing them to be modified, updated, or replaced without affecting other services, promoting agility and flexibility.
    Scalability:
    Monolithic: Scaling a monolithic application typically involves replicating the entire application, which can be inefficient and resource-intensive.
    Microservices: Microservices enable more granular scalability, allowing individual services to be scaled independently based on demand. This results in more efficient resource utilization and better performance under varying workloads.
    Technology Diversity:
    Monolithic: A monolithic application is built using a single technology stack, limiting flexibility in choosing the best tools and technologies for different components.
    Microservices: Microservices allow for technology diversity, where different services within the application can be implemented using different programming languages, frameworks, and databases, based on their specific requirements.
    Deployment:
    Monolithic: Deploying updates or changes to a monolithic application typically involves deploying the entire application, which can lead to longer deployment times and increased downtime.
    Microservices: Microservices enable more frequent and granular deployments, as updates can be made to individual services without affecting the entire application. This results in faster deployment cycles and reduced downtime.
    Overall, while monolithic architectures offer simplicity and ease of development, microservices provide greater flexibility, scalability, and resilience, making them well-suited for large, complex applications with evolving requirements.


4. Why do we need a useEffect Hook?   
    The useEffect hook in React is used to perform side effects in function components. Side effects can include things like data fetching, subscribing to external data sources, or manually changing the DOM.
    Here's why the useEffect hook is necessary:
    Lifecycle Management in Function Components: Prior to the introduction of hooks, managing side effects in React components was primarily done using class components and lifecycle methods such as componentDidMount, componentDidUpdate, and componentWillUnmount. However, with the increasing popularity of function components, there was a need for a mechanism to handle these side effects without using class components.
    Functional Programming: Hooks like useEffect allow developers to encapsulate side effects within the component logic itself, promoting a more functional programming style. This makes the code easier to read, understand, and maintain
    Dependency Management: The useEffect hook accepts a second argument, an array of dependencies. This allows developers to specify which values from the component's scope should trigger the effect to run. This helps prevent unnecessary re-execution of effects and ensures that they only run when necessary.
    Asynchronous Operations: Many side effects involve asynchronous operations such as data fetching or timers. The useEffect hook can handle asynchronous operations by allowing the effect function to return a cleanup function or a promise, ensuring proper cleanup and error handling.
    Replacing Multiple Lifecycle Methods: The useEffect hook can replace multiple lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount with a single mechanism. This simplifies the component's code and reduces redundancy.
    Overall, the useEffect hook is a fundamental tool in React functional components for managing side effects, ensuring proper cleanup, and improving the readability and maintainability of the code.

5. What is Optional Chaining?
   Optional chaining is a feature introduced in ECMAScript 2020 (ES11) and is supported in modern JavaScript environments and TypeScript. It provides a concise way to access properties and methods of an object without worrying about whether intermediate properties or methods are null or undefined.
    Consider the following example without optional chaining:
    const obj = {
    foo: {
        bar: {
        baz: 42
        }
    }
    };

    // Without optional chaining
    const value = obj.foo && obj.foo.bar && obj.foo.bar.baz;
    console.log(value); // Output: 42
    Here, we're checking each level of the object hierarchy to ensure that accessing obj.foo.bar.baz won't throw an error if any intermediate property is null or undefined.
    With optional chaining, you can achieve the same result in a more concise way:
    const obj = {
    foo: {
        bar: {
        baz: 42
        }
    }
    };
    // With optional chaining
    const value = obj.foo?.bar?.baz;
    console.log(value); // Output: 42
    Here, the ?. operator is the optional chaining operator. It allows you to safely access nested properties without explicitly checking for the existence of each intermediate property. If any property in the chain is null or undefined, the expression evaluates to undefined without throwing an error.
    Optional chaining can also be used with function calls:
    const obj = {
    foo: {
        bar: {
        baz: () => 42
        }
    }
    };
    // With optional chaining for function calls
    const value = obj.foo?.bar?.baz?.();
    console.log(value); // Output: 42
    If baz were not a function or any intermediate property was null or undefined, value would be undefined without causing an error.
    Optional chaining simplifies code by reducing the need for explicit null/undefined checks, making code more concise and readable, especially when working with deeply nested object structures.

6. What is Shimmer UI?
   Shimmer UI, also known as Skeleton UI or Skeleton Loading, is a user interface design technique used in applications, especially web and mobile apps, to indicate that content is loading or is about to be loaded. It involves displaying a simplified version of the UI structure with placeholder elements that mimic the layout of the actual content.
    The term "shimmer" refers to the effect of a subtle animation or movement that is applied to the placeholder elements, typically in the form of a gentle shimmering or fading effect. This animation helps convey the impression of activity and indicates to the user that content is being fetched or prepared.
    Shimmer UI serves several purposes:
    Indicate Loading: It provides a visual cue to users that content is loading, reducing the perception of wait time and keeping users engaged.
    Maintain Layout: By displaying placeholder elements that mimic the layout of the actual content, Shimmer UI helps maintain the overall structure and design of the interface while content is loading.
    Enhance User Experience: Shimmer UI contributes to a smoother and more polished user experience by providing feedback on the loading process and preventing sudden layout shifts or jarring changes.
    Mask Latency: In cases where fetching data from a server or performing other asynchronous operations may introduce latency, Shimmer UI can help mask this latency and create the impression of responsiveness.
    Shimmer UI is commonly used in scenarios where content loading times may vary, such as when fetching data from a remote server, loading images or media, or initializing complex UI components. It has become a popular design pattern in modern web and mobile app development for its effectiveness in improving perceived performance and user satisfaction.

7. What is the difference between JS expression and JS statement ?
    In JavaScript, expressions and statements are two fundamental building blocks of code, but they serve different purposes and have distinct characteristics.
    JavaScript Expression:
    An expression in JavaScript is any valid unit of code that produces a value. It can be as simple as a single variable or as complex as a combination of operators, function calls, and literals.
    Examples of JavaScript expressions include:
    5 (a literal value)
    myVariable (a variable)
    2 + 3 (an arithmetic expression)
    myFunction() (a function call)
    Expressions can be used anywhere in JavaScript code where a value is expected, such as in assignments, function arguments, conditionals, or as function return values.
    JavaScript Statement:
    A statement in JavaScript is a complete instruction that performs a specific action. Unlike expressions, statements do not necessarily produce a value. They are typically used to control the flow of execution, define variable assignments, or perform loops or function declarations.
    Examples of JavaScript statements include:
    Variable declarations: var x = 5;
    Conditional statements: if (condition) { /* code block */ }
    Looping statements: for (var i = 0; i < 5; i++) { /* code block */ }
    Function declarations: function myFunction() { /* code block */ }
    Statements are executed sequentially by the JavaScript engine, and they can have side effects such as modifying variables, invoking functions, or changing the program's control flow.
    Key Differences:
    Purpose: Expressions produce values, whereas statements perform actions or control the flow of execution.
    Value: Expressions always produce a value, whereas statements may or may not produce a value
    Usage: Expressions are often used within statements, but statements cannot be used within expressions
    Examples: Expressions include variables, literals, function calls, etc., while statements include variable declarations, conditionals, loops, etc.
    In summary, expressions and statements serve different roles in JavaScript code. Expressions produce values, while statements perform actions or control the flow of execution. Understanding the distinction between them is essential for writing clear and effective JavaScript code.

8. What is Conditional Rendering, explain with a code example.
   Conditional rendering in web development refers to the practice of rendering different content or components based on certain conditions or criteria. This allows developers to dynamically display different UI elements depending on the state of the application or user interactions.
    Here's an example of conditional rendering in React:

    import React, { useState } from 'react';
    function MyComponent() {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    return (
        <div>
        {isLoggedIn ? (
            <LoggedInContent />
        ) : (
            <LoginForm onLogin={() => setIsLoggedIn(true)} />
        )}
        </div>
    );
    }
    function LoginForm({ onLogin }) {
    const handleLogin = () => {
        // Simulate login process
        setTimeout(() => {
        onLogin();
        }, 1000);
    };

    return (
        <div>
        <h2>Login Form</h2>
        <button onClick={handleLogin}>Login</button>
        </div>
    );
    }
    function LoggedInContent() {
    return (
        <div>
        <h2>Welcome, User!</h2>
        <p>This is the content for logged-in users.</p>
        </div>
    );
    }
    export default MyComponent;
    In this example:
    We have a MyComponent functional component that manages the state of whether a user is logged in (isLoggedIn). Initially, the user is not logged in.
    Inside MyComponent, we use conditional rendering to render either the LoggedInContent component or the LoginForm component based on the value of isLoggedIn. If the user is logged in (isLoggedIn is true), we render the LoggedInContent, otherwise, we render the LoginForm.
    The LoginForm component is a simple form with a login button. When the button is clicked, it triggers the onLogin callback passed as a prop from MyComponent.
    When the user logs in successfully (e.g., after a simulated delay with setTimeout), the isLoggedIn state is updated to true, triggering MyComponent to re-render and display the LoggedInContent
    This is a basic example of conditional rendering in React, where different components are rendered based on a condition (isLoggedIn). In a real-world scenario, the conditions for rendering components might be more complex and based on various factors such as user authentication status, user permissions, or data availability.

9. What is CORS?
   CORS stands for Cross-Origin Resource Sharing. It is a security feature implemented by web browsers that restricts web pages from making requests to a different origin (domain, protocol, or port) than the one from which the page itself was served.
    The same-origin policy is a security measure to prevent malicious websites from accessing sensitive data or performing actions on behalf of the user without their consent. However, it can sometimes be too restrictive, especially in the context of web APIs and modern web applications where resources from different origins need to be accessed.
    CORS allows servers to specify which origins are allowed to access their resources via HTTP headers. When a browser makes a cross-origin request, it sends a preflight request (an HTTP OPTIONS request) to the server to determine whether the actual request is safe to send. The server then responds with CORS headers indicating whether the request is allowed.
    Here are the key components of CORS:
    Cross-Origin Requests: When a web page hosted on one domain tries to make a request to a different domain, it is considered a cross-origin request.
    CORS Headers: CORS headers are HTTP headers that servers include in their responses to indicate whether cross-origin requests from the browser should be allowed. The two most common CORS headers are:
    Access-Control-Allow-Origin: Specifies which origins are allowed to access the resource. It can be a specific origin, "*", or null.
    Access-Control-Allow-Methods: Specifies which HTTP methods are allowed for the request (e.g., GET, POST, PUT, DELETE)
    Preflight Request: Before making certain types of cross-origin requests (e.g., requests with custom headers or non-simple methods), browsers send a preflight request to the server to check if the actual request is allowed. The preflight request includes an HTTP OPTIONS method and may include additional CORS headers such as Access-Control-Request-Headers.
    By allowing servers to specify which origins are allowed to access their resources, CORS provides a mechanism for controlling cross-origin requests while still enabling the sharing of resources between different origins when necessary. It helps mitigate security risks associated with cross-origin requests while facilitating interoperability between web applications and APIs.

10. What is async and await?
    async and await are keywords in JavaScript used to work with asynchronous code in a more synchronous and readable manner. They were introduced in ECMAScript 2017 (ES8) and are widely supported in modern JavaScript environments.
    Here's how they work:
    async Function:
    The async keyword is used to define a function as asynchronous. An async function always returns a promise, and the value it resolves to will be whatever the function returns.
    async function fetchData() {
    // Asynchronous operations here
    return 'Data fetched!';
    }
    await Operator:
    The await keyword is used inside an async function to pause the execution of the function until a Promise is settled (resolved or rejected). It can only be used inside async functions.
    When await is used, the async function will wait for the promise to be resolved, and the result of the await expression will be the resolved value of the promise.
    async function fetchData() {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    return data;

    In this example, the fetchData function fetches data from an API using the fetch API. The await keyword pauses the execution of the function until the fetch promise is resolved, and then it waits for the response.json() promise to be resolved before returning the parsed JSON data.
    It's important to note that while await suspends the execution of the async function, it doesn't block the entire JavaScript thread. Other code outside the async function can continue to execute.
    Async/await simplifies asynchronous code compared to traditional promise chains or callbacks, making it easier to read and write. It's especially useful for handling asynchronous operations such as fetching data from servers, working with timers, or dealing with asynchronous file I/O.

11. What is the use of `const json = await data.json();` in getRestaurants() ?
    data.json() is a method of the Response object that allows a JSON object to be extracted from the response. The method returns a promise, so you have to wait for the JSON: await response.json().
    The Response object offers a lot of useful methods (all returning promises):
    data.json() returns a promise resolved to a JSON object
    data.text() returns a promise resolved to raw text
    data.formData() returns a promise resolved to FormData
    data.blob() returns a promise resolved to a Blob (a file-like object of raw data)
    data.arrayBuffer()() returns a promise resolved to an ArryBuffer (raw generic binary data)